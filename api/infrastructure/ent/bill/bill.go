// Code generated by ent, DO NOT EDIT.

package bill

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the bill type in the database.
	Label = "bill"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// EdgeProjectID holds the string denoting the project_id edge name in mutations.
	EdgeProjectID = "project_id"
	// EdgeSrcUser holds the string denoting the src_user edge name in mutations.
	EdgeSrcUser = "src_user"
	// EdgeDstUser holds the string denoting the dst_user edge name in mutations.
	EdgeDstUser = "dst_user"
	// Table holds the table name of the bill in the database.
	Table = "bills"
	// ProjectIDTable is the table that holds the project_id relation/edge.
	ProjectIDTable = "bills"
	// ProjectIDInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectIDInverseTable = "projects"
	// ProjectIDColumn is the table column denoting the project_id relation/edge.
	ProjectIDColumn = "project_bills"
	// SrcUserTable is the table that holds the src_user relation/edge.
	SrcUserTable = "bills"
	// SrcUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SrcUserInverseTable = "users"
	// SrcUserColumn is the table column denoting the src_user relation/edge.
	SrcUserColumn = "user_src_bill"
	// DstUserTable is the table that holds the dst_user relation/edge.
	DstUserTable = "bills"
	// DstUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	DstUserInverseTable = "users"
	// DstUserColumn is the table column denoting the dst_user relation/edge.
	DstUserColumn = "user_dst_bill"
)

// Columns holds all SQL columns for bill fields.
var Columns = []string{
	FieldID,
	FieldPrice,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "bills"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"project_bills",
	"user_src_bill",
	"user_dst_bill",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Bill queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByProjectIDField orders the results by project_id field.
func ByProjectIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectIDStep(), sql.OrderByField(field, opts...))
	}
}

// BySrcUserField orders the results by src_user field.
func BySrcUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSrcUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByDstUserField orders the results by dst_user field.
func ByDstUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDstUserStep(), sql.OrderByField(field, opts...))
	}
}
func newProjectIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProjectIDTable, ProjectIDColumn),
	)
}
func newSrcUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SrcUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, SrcUserTable, SrcUserColumn),
	)
}
func newDstUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DstUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, DstUserTable, DstUserColumn),
	)
}
