// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BillsColumns holds the columns for the "bills" table.
	BillsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "price", Type: field.TypeInt},
		{Name: "project_bills", Type: field.TypeInt, Nullable: true},
		{Name: "user_src_bills", Type: field.TypeInt},
		{Name: "user_dst_bills", Type: field.TypeInt},
	}
	// BillsTable holds the schema information for the "bills" table.
	BillsTable = &schema.Table{
		Name:       "bills",
		Columns:    BillsColumns,
		PrimaryKey: []*schema.Column{BillsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "bills_projects_bills",
				Columns:    []*schema.Column{BillsColumns[2]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "bills_users_src_bills",
				Columns:    []*schema.Column{BillsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "bills_users_dst_bills",
				Columns:    []*schema.Column{BillsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ProjectsColumns holds the columns for the "projects" table.
	ProjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "created_by", Type: field.TypeInt},
	}
	// ProjectsTable holds the schema information for the "projects" table.
	ProjectsTable = &schema.Table{
		Name:       "projects",
		Columns:    ProjectsColumns,
		PrimaryKey: []*schema.Column{ProjectsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// ProjectUsersColumns holds the columns for the "project_users" table.
	ProjectUsersColumns = []*schema.Column{
		{Name: "project_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// ProjectUsersTable holds the schema information for the "project_users" table.
	ProjectUsersTable = &schema.Table{
		Name:       "project_users",
		Columns:    ProjectUsersColumns,
		PrimaryKey: []*schema.Column{ProjectUsersColumns[0], ProjectUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "project_users_project_id",
				Columns:    []*schema.Column{ProjectUsersColumns[0]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "project_users_user_id",
				Columns:    []*schema.Column{ProjectUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BillsTable,
		ProjectsTable,
		UsersTable,
		ProjectUsersTable,
	}
)

func init() {
	BillsTable.ForeignKeys[0].RefTable = ProjectsTable
	BillsTable.ForeignKeys[1].RefTable = UsersTable
	BillsTable.ForeignKeys[2].RefTable = UsersTable
	ProjectUsersTable.ForeignKeys[0].RefTable = ProjectsTable
	ProjectUsersTable.ForeignKeys[1].RefTable = UsersTable
}
