// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ei-sugimoto/tatekae/api/infrastructure/ent/bill"
	"github.com/ei-sugimoto/tatekae/api/infrastructure/ent/project"
	"github.com/ei-sugimoto/tatekae/api/infrastructure/ent/user"
)

// Bill is the model entity for the Bill schema.
type Bill struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Price holds the value of the "price" field.
	Price int `json:"price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillQuery when eager-loading is set.
	Edges          BillEdges `json:"edges"`
	project_bills  *int
	user_src_bills *int
	user_dst_bills *int
	selectValues   sql.SelectValues
}

// BillEdges holds the relations/edges for other nodes in the graph.
type BillEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// SrcUser holds the value of the src_user edge.
	SrcUser *User `json:"src_user,omitempty"`
	// DstUser holds the value of the dst_user edge.
	DstUser *User `json:"dst_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// SrcUserOrErr returns the SrcUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) SrcUserOrErr() (*User, error) {
	if e.SrcUser != nil {
		return e.SrcUser, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "src_user"}
}

// DstUserOrErr returns the DstUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) DstUserOrErr() (*User, error) {
	if e.DstUser != nil {
		return e.DstUser, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "dst_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bill) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bill.FieldID, bill.FieldPrice:
			values[i] = new(sql.NullInt64)
		case bill.ForeignKeys[0]: // project_bills
			values[i] = new(sql.NullInt64)
		case bill.ForeignKeys[1]: // user_src_bills
			values[i] = new(sql.NullInt64)
		case bill.ForeignKeys[2]: // user_dst_bills
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bill fields.
func (b *Bill) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bill.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case bill.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				b.Price = int(value.Int64)
			}
		case bill.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_bills", value)
			} else if value.Valid {
				b.project_bills = new(int)
				*b.project_bills = int(value.Int64)
			}
		case bill.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_src_bills", value)
			} else if value.Valid {
				b.user_src_bills = new(int)
				*b.user_src_bills = int(value.Int64)
			}
		case bill.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_dst_bills", value)
			} else if value.Valid {
				b.user_dst_bills = new(int)
				*b.user_dst_bills = int(value.Int64)
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Bill.
// This includes values selected through modifiers, order, etc.
func (b *Bill) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the Bill entity.
func (b *Bill) QueryProject() *ProjectQuery {
	return NewBillClient(b.config).QueryProject(b)
}

// QuerySrcUser queries the "src_user" edge of the Bill entity.
func (b *Bill) QuerySrcUser() *UserQuery {
	return NewBillClient(b.config).QuerySrcUser(b)
}

// QueryDstUser queries the "dst_user" edge of the Bill entity.
func (b *Bill) QueryDstUser() *UserQuery {
	return NewBillClient(b.config).QueryDstUser(b)
}

// Update returns a builder for updating this Bill.
// Note that you need to call Bill.Unwrap() before calling this method if this Bill
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bill) Update() *BillUpdateOne {
	return NewBillClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Bill entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bill) Unwrap() *Bill {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bill is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bill) String() string {
	var builder strings.Builder
	builder.WriteString("Bill(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", b.Price))
	builder.WriteByte(')')
	return builder.String()
}

// Bills is a parsable slice of Bill.
type Bills []*Bill
