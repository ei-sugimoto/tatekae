// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto_bill/v1/bill.proto

package billv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ei-sugimoto/tatekae/api/gen/proto_bill/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BillServiceName is the fully-qualified name of the BillService service.
	BillServiceName = "proto_bill.v1.BillService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BillServiceCreateProcedure is the fully-qualified name of the BillService's Create RPC.
	BillServiceCreateProcedure = "/proto_bill.v1.BillService/Create"
	// BillServiceSumarizeByProjectProcedure is the fully-qualified name of the BillService's
	// SumarizeByProject RPC.
	BillServiceSumarizeByProjectProcedure = "/proto_bill.v1.BillService/SumarizeByProject"
	// BillServiceListProcedure is the fully-qualified name of the BillService's List RPC.
	BillServiceListProcedure = "/proto_bill.v1.BillService/List"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	billServiceServiceDescriptor                 = v1.File_proto_bill_v1_bill_proto.Services().ByName("BillService")
	billServiceCreateMethodDescriptor            = billServiceServiceDescriptor.Methods().ByName("Create")
	billServiceSumarizeByProjectMethodDescriptor = billServiceServiceDescriptor.Methods().ByName("SumarizeByProject")
	billServiceListMethodDescriptor              = billServiceServiceDescriptor.Methods().ByName("List")
)

// BillServiceClient is a client for the proto_bill.v1.BillService service.
type BillServiceClient interface {
	Create(context.Context, *connect.Request[v1.BillServiceCreateRequest]) (*connect.Response[v1.BillServiceCreateResponse], error)
	SumarizeByProject(context.Context, *connect.Request[v1.BillServiceSumrizeByProjectRequest]) (*connect.Response[v1.BillServiceSumrizeByProjectResponse], error)
	List(context.Context, *connect.Request[v1.BillServiceListRequest]) (*connect.Response[v1.BillServiceListResponse], error)
}

// NewBillServiceClient constructs a client for the proto_bill.v1.BillService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBillServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BillServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &billServiceClient{
		create: connect.NewClient[v1.BillServiceCreateRequest, v1.BillServiceCreateResponse](
			httpClient,
			baseURL+BillServiceCreateProcedure,
			connect.WithSchema(billServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sumarizeByProject: connect.NewClient[v1.BillServiceSumrizeByProjectRequest, v1.BillServiceSumrizeByProjectResponse](
			httpClient,
			baseURL+BillServiceSumarizeByProjectProcedure,
			connect.WithSchema(billServiceSumarizeByProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v1.BillServiceListRequest, v1.BillServiceListResponse](
			httpClient,
			baseURL+BillServiceListProcedure,
			connect.WithSchema(billServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// billServiceClient implements BillServiceClient.
type billServiceClient struct {
	create            *connect.Client[v1.BillServiceCreateRequest, v1.BillServiceCreateResponse]
	sumarizeByProject *connect.Client[v1.BillServiceSumrizeByProjectRequest, v1.BillServiceSumrizeByProjectResponse]
	list              *connect.Client[v1.BillServiceListRequest, v1.BillServiceListResponse]
}

// Create calls proto_bill.v1.BillService.Create.
func (c *billServiceClient) Create(ctx context.Context, req *connect.Request[v1.BillServiceCreateRequest]) (*connect.Response[v1.BillServiceCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// SumarizeByProject calls proto_bill.v1.BillService.SumarizeByProject.
func (c *billServiceClient) SumarizeByProject(ctx context.Context, req *connect.Request[v1.BillServiceSumrizeByProjectRequest]) (*connect.Response[v1.BillServiceSumrizeByProjectResponse], error) {
	return c.sumarizeByProject.CallUnary(ctx, req)
}

// List calls proto_bill.v1.BillService.List.
func (c *billServiceClient) List(ctx context.Context, req *connect.Request[v1.BillServiceListRequest]) (*connect.Response[v1.BillServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// BillServiceHandler is an implementation of the proto_bill.v1.BillService service.
type BillServiceHandler interface {
	Create(context.Context, *connect.Request[v1.BillServiceCreateRequest]) (*connect.Response[v1.BillServiceCreateResponse], error)
	SumarizeByProject(context.Context, *connect.Request[v1.BillServiceSumrizeByProjectRequest]) (*connect.Response[v1.BillServiceSumrizeByProjectResponse], error)
	List(context.Context, *connect.Request[v1.BillServiceListRequest]) (*connect.Response[v1.BillServiceListResponse], error)
}

// NewBillServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBillServiceHandler(svc BillServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	billServiceCreateHandler := connect.NewUnaryHandler(
		BillServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(billServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billServiceSumarizeByProjectHandler := connect.NewUnaryHandler(
		BillServiceSumarizeByProjectProcedure,
		svc.SumarizeByProject,
		connect.WithSchema(billServiceSumarizeByProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billServiceListHandler := connect.NewUnaryHandler(
		BillServiceListProcedure,
		svc.List,
		connect.WithSchema(billServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto_bill.v1.BillService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BillServiceCreateProcedure:
			billServiceCreateHandler.ServeHTTP(w, r)
		case BillServiceSumarizeByProjectProcedure:
			billServiceSumarizeByProjectHandler.ServeHTTP(w, r)
		case BillServiceListProcedure:
			billServiceListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBillServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBillServiceHandler struct{}

func (UnimplementedBillServiceHandler) Create(context.Context, *connect.Request[v1.BillServiceCreateRequest]) (*connect.Response[v1.BillServiceCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto_bill.v1.BillService.Create is not implemented"))
}

func (UnimplementedBillServiceHandler) SumarizeByProject(context.Context, *connect.Request[v1.BillServiceSumrizeByProjectRequest]) (*connect.Response[v1.BillServiceSumrizeByProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto_bill.v1.BillService.SumarizeByProject is not implemented"))
}

func (UnimplementedBillServiceHandler) List(context.Context, *connect.Request[v1.BillServiceListRequest]) (*connect.Response[v1.BillServiceListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto_bill.v1.BillService.List is not implemented"))
}
